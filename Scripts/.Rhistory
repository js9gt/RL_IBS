words
text_tokens(words, stemmer = "en")
##########  Dictionary Coding for Evidentials ##########################
#Evidencials
words<-c('agree', 'agrees', 'agreed', 'apparent', 'apparently', 'believe', 'believed', 'believes', 'claim', 'claims', 'claimed', 'complain', 'complained', 'complains', 'concern', 'concerned', 'concerns', 'decide', 'decided', 'decides', 'decline', 'declined', 'declines', 'deny', 'denies', 'denied', 'describe', 'describes', 'described', 'endorse', 'endorsed', 'endorses', 'insist', 'insists', 'insisted', 'note', 'noted', 'notes', 'protest', 'protests', 'protested',  'refuse', 'refuses', 'refused', 'repeat', 'repeats', 'repeated', 'report', 'reported', 'reports', 'require', 'requires', 'required', 'request', 'requests', 'requested', 'seem', 'seems', 'seemed', 'say', 'says', 'said', 'state', 'states', 'stated', 'tell', 'tells', 'told', 'want', 'wanted', 'wants')
#make stems
dic_evid_st<-wordStem(words, language="en")
#make stems
library(RTextTools)
install.packages("RTextTools")
#make stems
library(RTextTools)
##########  Dictionary Coding for Evidentials ##########################
#Evidencials
words<-c('agree', 'agrees', 'agreed', 'apparent', 'apparently', 'believe', 'believed', 'believes', 'claim', 'claims', 'claimed', 'complain', 'complained', 'complains', 'concern', 'concerned', 'concerns', 'decide', 'decided', 'decides', 'decline', 'declined', 'declines', 'deny', 'denies', 'denied', 'describe', 'describes', 'described', 'endorse', 'endorsed', 'endorses', 'insist', 'insists', 'insisted', 'note', 'noted', 'notes', 'protest', 'protests', 'protested',  'refuse', 'refuses', 'refused', 'repeat', 'repeats', 'repeated', 'report', 'reported', 'reports', 'require', 'requires', 'required', 'request', 'requests', 'requested', 'seem', 'seems', 'seemed', 'say', 'says', 'said', 'state', 'states', 'stated', 'tell', 'tells', 'told', 'want', 'wanted', 'wants')
wordStem(words, language="en")
################## Jane's code for stemming ##################
library(corpus)
words<-'agree agrees agreed apparent apparently believe believed believes claim claims claimed complain complained complains concern concerned concerns decide decided decides decline declined declines deny denies denied describe describes described endorse endorsed endorses insist insists insisted note noted notes protest protests protested refuse refuses refused repeat repeats repeated report reported reports require requires required request requests requested seem seems seemed say says said state states stated tell tells told want wanted wants'
text_tokens(words, stemmer = "en")
words <-'agree agrees agreed apparent apparently believe believed believes claim claims claimed complain complained complains concern concerned concerns decide decided decides decline declined declines deny denies denied describe describes described endorse endorsed endorses insist insists insisted note noted notes protest protests protested refuse refuses refused repeat repeats repeated report reported reports require requires required request requests requested seem seems seemed say says said state states stated tell tells told want wanted wants'
as.list(words)
dic_evid_st <- text_tokens(words, stemmer = "en")
dic_relatives<-c('he', 'she', 'daughter', 'son', 'mom', 'mother', 'dad', 'father', 'sister', 'brother', 'grandma', 'grandpa', 'family', 'families', 'member', 'friend', 'aunt', 'uncle', 'cousin', 'relative', 'niece', 'patient', 'patients', 'nephew', 'woman', 'man', 'parent', 'spouse', 'wife', 'husband', 'surrogate', 'they', 'daughters', 'sons', 'sisters', 'brothers', 'grandmas', 'grandpas', 'members', 'friends', 'aunts', 'uncles', 'cousins', 'relatives', 'nieces', 'nephews', 'women', 'men', 'parents', 'spouses', 'wives', 'husbands', 'surrogates')
text_tokens(dic_relatives, stemmer = "en")
##########  Dictionary Coding for Evidentials ##########################
#Evidencials
words<-c('agree', 'agrees', 'agreed', 'apparent', 'apparently', 'believe', 'believed', 'believes', 'claim', 'claims', 'claimed', 'complain', 'complained', 'complains', 'concern', 'concerned', 'concerns', 'decide', 'decided', 'decides', 'decline', 'declined', 'declines', 'deny', 'denies', 'denied', 'describe', 'describes', 'described', 'endorse', 'endorsed', 'endorses', 'insist', 'insists', 'insisted', 'note', 'noted', 'notes', 'protest', 'protests', 'protested',  'refuse', 'refuses', 'refused', 'repeat', 'repeats', 'repeated', 'report', 'reported', 'reports', 'require', 'requires', 'required', 'request', 'requests', 'requested', 'seem', 'seems', 'seemed', 'say', 'says', 'said', 'state', 'states', 'stated', 'tell', 'tells', 'told', 'want', 'wanted', 'wants')
dic_evid_st <- text_tokens(words, stemmer = "en")
dic_evid_st
### A lot of these dictionary evidentials are repeats, so we want to get the unique ones
dic_evid_st_unique <- unique(dic_evid_st)
dic_evid_st_unique
dic_relatives_st <-text_tokens(dic_relatives, stemmer = "en")
dic_relatives <-c('he', 'she', 'daughter', 'son', 'mom', 'mother', 'dad', 'father', 'sister', 'brother', 'grandma', 'grandpa', 'family', 'families', 'member', 'friend', 'aunt', 'uncle', 'cousin', 'relative', 'niece', 'patient', 'patients', 'nephew', 'woman', 'man', 'parent', 'spouse', 'wife', 'husband', 'surrogate', 'they', 'daughters', 'sons', 'sisters', 'brothers', 'grandmas', 'grandpas', 'members', 'friends', 'aunts', 'uncles', 'cousins', 'relatives', 'nieces', 'nephews', 'women', 'men', 'parents', 'spouses', 'wives', 'husbands', 'surrogates')
dic_relatives_st <-text_tokens(dic_relatives, stemmer = "en")
dic_relatives_st_unique <- unique(dic_relatives_st)
dic_relatives_st_unique
expand.grid(dic_relatives_st_unique, dic_evid_st_unique)
expand.grid(dic_relatives, words)
dic_relatives_st_unique
class(dic_relatives)
as.list(dic_relatives_st_unique)
as.data.frame(dic_relatives_st_unique)
data.frame(dic_relatives_st_unique)
matrix(dic_relatives_st_unique)
dic_relatives
dic_relatives_st_unique
unlist(dic_relatives_st_unique)
### A lot of these dictionary evidentials are repeats, so we want to get the unique ones
dic_evid_st_unique <- unlist(unique(dic_evid_st))
dic_relatives_st_unique <- unlist(unique(dic_relatives_st))
expand.grid(dic_relatives_st_unique, dic_evid_st_unique)
paste(result.df$Var1,result.df$Var2)
#####################
result.df <- expand.grid(dic_relatives_st_unique, dic_evid_st_unique)
result.df
paste(result.df$Var1,result.df$Var2)
dic_ready<-(result.df$Var3)
#turn the words into dictionary
dic_ready.list = as.list(dic_ready)
dic_ready.list
dic_ready
result.df$Var3<-paste(result.df$Var1,result.df$Var2)
dic_ready<-(result.df$Var3)
dic_ready
as.list(dic_ready)
#turn the words into dictionary
dic_ready.list = as.list(dic_ready)
names(dic_ready.list)
dic_ready
dic_ready
chartr(" ", "_", dic_ready)
#turn the words into dictionary
dic_ready.list <- as.list(dic_ready)
## for better naming, replace spaces between characters with _
names(dic_ready.list) <- chartr(" ", "_", dic_ready)
evid_dic <- dictionary(dic_ready.list)
library(quanteda)
install.packages("quanteda")
library(quanteda)
evid_dic <- dictionary(dic_ready.list)
names(dic_ready.list) <- chartr(" ", "_", dic_ready)
evid_dic
names(dic_ready.list) <- chartr(" ", "_", dic_ready)
evid_dic
evid_dic
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
#Read in excel file
ibs_dat <- read_excel("~/Desktop/RL_IBS/ibs_dat.xlsx", skip = 1)
## dimensions-- 500 total claims
dim(ibs_dat)
## unique date in year-month-date-- 88 unique dates
length(unique(ibs_dat$from_dt))
## unique claim codes-- 155
length(unique(ibs_dat$claimno))
## unique procedure descriptions-- 142
length(unique(ibs_dat$PROCEDURE_DESC))
library(readxl)
library(lubridate)
library(dplyr)
library(ggplot2)
#Read in excel file
ibs_dat <- read_excel("~/Desktop/RL_IBS/ibs_dat.xlsx", skip = 1)
## dimensions-- 500 total claims
dim(ibs_dat)
## unique date in year-month-date-- 88 unique dates
length(unique(ibs_dat$from_dt))
## unique claim codes-- 155
length(unique(ibs_dat$claimno))
## unique procedure descriptions-- 142
length(unique(ibs_dat$PROCEDURE_DESC))
### unique claims & counts per date
unique_claim_counts <- ibs_dat %>% arrange(ymd(ibs_dat$from_dt)) %>%
group_by(from_dt, claimno) %>%
tally
## Create plot with unique "from_dt" as x-axis, number of TOTAL claims as y-axis
ggplot(data = unique_claim_counts, aes(x = from_dt, y = n)) +
geom_bar(stat = "identity", fill = "purple") +
labs(title ="Total Number of Claims (non-unique) per visit date",
x = "Date", y = "Number of (non-unique) Claims")
## Plot with date on y axis, number of unique visits per YEAR-- isolate unique from_dt and count
unique_visits_year <- ibs_dat %>% distinct(from_dt, .keep_all = TRUE) %>% mutate(month = format(from_dt, "%m"),
year = format(from_dt, "%Y")) %>% group_by(year) %>% tally
ggplot(data = unique_visits_year, aes(x = year, y = n, group = 1)) +
geom_point() + geom_line(linetype=2) +
labs(title ="Total Number of Unique Visits per Year",
x = "Year", y = "Number of Visits")
## We can also group these by month from year to year
unique_visits_month <- ibs_dat %>% distinct(from_dt, .keep_all = TRUE) %>% mutate(month = format(from_dt, "%m"),
year = format(from_dt, "%Y")) %>% group_by(year, month) %>% tally
unique_visits_month
ggplot(unique_visits_month, aes(x = month, y = n, fill = year)) + facet_wrap(~year)  + opts(title = "My Data") + labs(x = "Month", y = "Number of Visits") + geom_bar(position="dodge")
ggplot(unique_visits_month, aes(x = month, y = n, fill = year)) + facet_wrap(~year) + labs(x = "Month", y = "Number of Visits") + geom_bar(position="dodge")
ggplot(unique_visits_month, aes(x = month, y = n, group = year)) + facet_wrap(~year) + labs(x = "Month", y = "Number of Visits") + geom_bar(position="dodge")
unique_visits_month
ggplot(unique_visits_month, aes(x = month, y = n)) + facet_wrap(~year) + labs(x = "Month", y = "Number of Visits") + geom_bar(position="dodge")
ggplot(data = unique_visits_month, aes(x = month, y = n, group = 1)) +
facet_wrap(~year) + geom_point() + geom_line(linetype=2) +
labs(title ="Total Number of Unique Visits per Year",
x = "Year", y = "Number of Visits")
ggplot(data = unique_visits_month, aes(x = month, y = n, group = 1)) +
facet_wrap(~year) + geom_bar()
ggplot(data = unique_visits_month, aes(x = month, y = n, group = 1)) +
facet_wrap(~year) + geom_bar(fill = n)
ggplot(data = unique_visits_month, aes(x = month, y = n)) +
facet_wrap(~year)
ggplot(data = unique_visits_month, aes(x = month, y = n)) +
facet_wrap(~year) + geom_bar(fill = n)
ggplot(data = unique_visits_month, aes(x = month, y = n)) +
facet_wrap(~year) + geom_line() + geom_line(linetype=2) +
labs(title ="Total Number of Unique Visits per Year",
x = "Year", y = "Number of Visits")
ggplot(data = unique_visits_month, aes(x = month, y = n, group = 1)) +
facet_wrap(~year) + geom_line() + geom_line(linetype=2) +
labs(title ="Total Number of Unique Visits per Year",
x = "Year", y = "Number of Visits")
ggplot(data = unique_visits_month, aes(x = month, y = n, group = 1)) +
facet_wrap(~year) + geom_point() + geom_line(linetype=2) +
labs(title ="Total Number of Unique Visits per Year",
x = "Year", y = "Number of Visits")
ggplot(data = unique_visits_month, aes(x = month, y = n, group = 1)) +
facet_wrap(~year) + geom_point() + geom_line(linetype=2) +
labs(title ="Unique Visits Each Month by Year",
x = "Year", y = "Number of Visits")
ibs_dat$conf_num
ibs_dat$conf_num != NA
ibs_dat$conf_num != "NA"
ibs_dat[ibs_dat$conf_num != "NA", ]
ibs_dat$conf_num != "NA"
na.omit(ibs_dat$conf_num)
ibs_dat %>% na.omit(ibs_dat$conf_num, .keep_all = TRUE)
ibs_dat %>% na.omit(ibs_dat$conf_num)
na.omit(ibs_dat$conf_num)
ibs_dat[ na.omit(ibs_dat$conf_num), ]
na.omit(ibs_dat$conf_num)
ibs_dat
ibs_dat[,"conf_num"]
ibs_dat[!is.na(ibs_dat[,"conf_num"]),]
ibs_dat[!is.na(ibs_dat[,"conf_num"]),] %>% arrange(ymd(.$from_dt))
ibs_dat[!is.na(ibs_dat[,"conf_num"]),] %>% arrange(ymd(from_dt)) %>%
group_by(from_dt, claimno) %>%
tally
ibs_dat[!is.na(ibs_dat[,"conf_num"]),]
ibs_dat[!is.na(ibs_dat[,"conf_num"]),] %>% arrange(ymd(from_dt))
ibs_dat[!is.na(ibs_dat[,"conf_num"]),] %>% arrange(ymd(from_dt)) %>%
group_by(conf_num) %>%
tally
ibs_dat[!is.na(ibs_dat[,"conf_num"]),] %>% distinct(from_dt, .keep_all = TRUE) %>% mutate(month = format(from_dt, "%m"),
year = format(from_dt, "%Y")) %>% group_by(year, month, conf_num) %>% tally
ibs_dat[!is.na(ibs_dat[,"conf_num"]),]
ibs_dat[!is.na(ibs_dat[,"conf_num"]),] %>% mutate(month = format(from_dt, "%m"),
year = format(from_dt, "%Y"))
ibs_dat[!is.na(ibs_dat[,"conf_num"]),] %>% mutate(month = format(from_dt, "%m"),
year = format(from_dt, "%Y"))
ibs_dat[!is.na(ibs_dat[,"conf_num"]),] %>% distinct(from_dt, .keep_all = TRUE) %>% mutate(month = format(from_dt, "%m"),
year = format(from_dt, "%Y")) %>% group_by(year, month, conf_num) %>% tally
ibs_dat[!is.na(ibs_dat[,"conf_num"]),] %>% distinct(from_dt, .keep_all = TRUE) %>% mutate(month = format(from_dt, "%m"),
year = format(from_dt, "%Y")) %>% group_by(conf_num, year, month) %>% tally
unique_claim_counts <- ibs_dat %>% arrange(ymd(ibs_dat$from_dt)) %>%
group_by(from_dt, claimno) %>%
tally
unique_claim_counts
unique_visits_year
ggplot(data = unique_visits_month, aes(x = month, y = n, group = 1)) +
facet_wrap(~year) + geom_point() + geom_line(linetype=2) +
labs(title ="Unique Visits Each Month by Year",
x = "Year", y = "Number of Visits")
ibs_dat[!is.na(ibs_dat[,"conf_num"]),] %>% distinct(from_dt, .keep_all = TRUE) %>% mutate(month = format(from_dt, "%m"),
year = format(from_dt, "%Y")) %>% group_by(conf_num, year, month) %>% tally
ibs_dat[!is.na(ibs_dat[,"conf_num"]),] %>% distinct(from_dt, .keep_all = TRUE) %>% mutate(month = format(from_dt, "%m"),
year = format(from_dt, "%Y")) %>% group_by(year, month) %>% tally
ibs_dat[!is.na(ibs_dat[,"conf_num"]),] %>% distinct(from_dt, .keep_all = TRUE) %>% mutate(month = format(from_dt, "%m"),
year = format(from_dt, "%Y")) %>% group_by(year, month, conf_num) %>% tally
ibs_dat[!is.na(ibs_dat[,"conf_num"]),] %>% distinct(from_dt, .keep_all = TRUE) %>% mutate(month = format(from_dt, "%m"),
year = format(from_dt, "%Y")) %>% group_by(year, month) %>% tally
ibs_dat[!is.na(ibs_dat[,"conf_num"]),] %>% distinct(from_dt, .keep_all = TRUE) %>% mutate(month = format(from_dt, "%m"),
year = format(from_dt, "%Y")) %>% group_by(year, month, conf_num) %>% tally
ibs_dat[!is.na(ibs_dat[,"conf_num"]),] %>% distinct(from_dt, .keep_all = TRUE) %>% mutate(month = format(from_dt, "%m"),
year = format(from_dt, "%Y")) %>% group_by(year, month, conf_num)
ibs_dat[!is.na(ibs_dat[,"conf_num"]),] %>% distinct(from_dt, .keep_all = TRUE) %>% mutate(month = format(from_dt, "%m"),
year = format(from_dt, "%Y")) %>% group_by(year, month, conf_num) %>% tally
unique_visits_year
ibs_dat %>% distinct(from_dt, .keep_all = TRUE)
ibs_dat[!is.na(ibs_dat[,"conf_num"]),] %>% distinct(from_dt, .keep_all = TRUE) %>% mutate(month = format(from_dt, "%m"),
year = format(from_dt, "%Y")) %>% group_by(year, month, conf_num) %>% tally
ggplot(data = unique_visits_month, aes(x = month, y = n, group = 1)) +
facet_wrap(~year) + geom_point() + geom_line(linetype=2) +
labs(title ="Unique Visits Each Month by Year",
x = "Year", y = "Number of Visits")
ibs_dat[,"PROCEDURE_DESCRIPTION"]
ibs_dat[,"PROCEDURE_DESCR"]
ibs_dat[,"PROCEDURE_DESC"]
unique(ibs_dat[,"PROCEDURE_DESC"])
ibs_dat[,"PROCEDURE_DESC"] %>% tally()
unique(ibs_dat[,"PROCEDURE_DESC"]) %>% tally()
ibs_dat[,"PROCEDURE_DESC"] %>% strsplit()
strsplit(ibs_dat[,"PROCEDURE_DESC"])
strsplit(ibs_dat[,"PROCEDURE_DESC"], pattern)
strsplit(ibs_dat[,"PROCEDURE_DESC"], pattern = "")
ibs_dat %>%
group_by(PROCEDURE_DESC) %>%
summarize(distinct_points = n_distinct(points))
library(tokenizers)
install.packages("tokenizers")
library(tokenizers)
ibs_dat[,"PROCEDURE DESC"]
ibs_dat
ibs_dat[,"PROCEDURE_DESC"]
desc <- ibs_dat[,"PROCEDURE_DESC"]
tokenize_words(desc[1:2])
desc[1:2]
desc[1:2, ]
tokenize_words(desc[1:2, ])
tokenize_words(desc)
## Create vector just for procedure descriptions for ease of access
desc <- ibs_dat[,"PROCEDURE_DESC"] %>%
mutate_all(as.character)
tokenize_words(desc)
desc
ibs_dat[,"PROCEDURE_DESC"] %>%
mutate_all(as.character)
ibs_dat[,"PROCEDURE_DESC"] %>%
mutate_all(as.character) %>%
unnest_tokens(word, text)
tokenize_words(desc)
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])
ibs_dat[,"PROCEDURE_DESC"]
tibble(txt = ibs_dat[,"PROCEDURE_DESC"]) %>%
unnest_tokens(word, text)
library(dplyr)
tibble(txt = ibs_dat[,"PROCEDURE_DESC"]) %>%
unnest_tokens(word, txt)
library(tidytext)
install.packages("tidytext")
library(tidytext)
tibble(txt = ibs_dat[,"PROCEDURE_DESC"]) %>%
unnest_tokens(word, txt)
ibs_dat[,"PROCEDURE_DESC"]
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt)
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt) %>$ count()
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt) %>% count()
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt) %>%
group_by(word) %>%
summarize(Count=n())
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt) %>%
group_by(word) %>%
Count=n()
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt) %>%
group_by(word) %>%
count()
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt) %>%
group_by(word) %>%
tally()
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt) %>%
group_by(word)
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt) %>%
group_by(word) %>%
row_sums()
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt) %>%
group_by(word) %>%
slam::row_sums
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt) %>%
count(tokens) %>%
filter(!tokens %in% stop_words)
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt) %>%
count(tokens)
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt)
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt) %>%
count(word)
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt) %>%
count(word) %>%
arrange(desc())
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt) %>%
count(word) %>%
arrange(desc(count))
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt) %>%
count(word) %>%
arrange(desc(n))
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt, token="ngrams", n=4, to_lower = T)
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt, token="ngrams", n=4, to_lower = T) %>%
filter(!tokens %in% stop_words)
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt, token="ngrams", n=4, to_lower = T) %>%
count(word)
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt, token="ngrams", n=4, to_lower = T) %>%
count(word) %>%
filter(!tokens %in% stop_words) %>%
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt, token="ngrams", n=4, to_lower = T) %>%
count(word) %>%
filter(!tokens %in% stop_words) %>%
arrange(desc(n))
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt, token="ngrams", n=4, to_lower = T) %>%
count(word) %>%
filter(values(!tokens() %in% stop_words)
a
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt, token="ngrams", n=4, to_lower = T) %>%
count(word) %>%
filter(values(!tokens() %in% stop_words))
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
filter(values(!tokens() %in% stop_words))
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
filter(!tokens() %in% stop_words)
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt, token="ngrams", n=4, to_lower = T) %>%
anti_join(stop_words) %>%
count(word)
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt, token="ngrams", n=4, to_lower = T) %>%
anti_join(stop_words) %>%
count(word) %>%
arrange(desc(n))
## Some stop words that may not be useful
stop_words <- c('a', 'and', 'for', 'the', 'or', 'of')
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt, token="ngrams", n=4, to_lower = T) %>%
anti_join(stop_words) %>%
count(word) %>%
arrange(desc(n))
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt, token="ngrams", n=4, to_lower = T) %>%
anti_join(stop_words)
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt, token="ngrams", n=4, to_lower = T) %>%
anti_join(stop_words, by = c(token = "word"))
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt, token="ngrams", n=4, to_lower = T) %>%
anti_join(stop_words, by= c("token" = "word"))
gsub(paste0('\\b',tm::stopwords("english"), '\\b',
collapse = '|'), '', ibs_dat[,"PROCEDURE_DESC"])
ibs_dat[,"PROCEDURE_DESC"] %>% unnest_tokens(word,words,strip_punct = FALSE)
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt) %>%
filter(!word %in% stop_words$word)
## Some stop words that may not be useful
stop_words <- c('a', 'and', 'for', 'the', 'or', 'of')
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt) %>%
filter(!word %in% stop_words$word)
tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt) %>%
filter(!word %in% stop_words)
desc <- tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt, token="ngrams", n=3, to_lower = T) %>%
count(word) %>%
arrange(desc(n))
desc
desc <- tibble(txt = ibs_dat[,"PROCEDURE_DESC"])  %>%
mutate_all(as.character) %>%
unnest_tokens(word, txt, token="ngrams", n=5, to_lower = T) %>%
count(word) %>%
arrange(desc(n))
desc
ibs_dat[,"PROCEDURE_DESC"]
ibs_dat[,"PROCEDURE_DESC"] %>% count()
unique(ibs_dat[,"PROCEDURE_DESC"])
tabulate(ibs_dat[,"PROCEDURE_DESC"])
table(ibs_dat[,"PROCEDURE_DESC"])
table(ibs_dat[,"PROCEDURE_DESC"]) [order(table(ibs_dat[,"PROCEDURE_DESC"]) )]
## table of frequencies
my_tab <- table(ibs_dat[,"PROCEDURE_DESC"])
## order table
my_tab[order(my_tab, decreasing = TRUE)]
## order table
my_tab[order(my_tab, decreasing = TRUE)]
class(my_tab)
data.table(ibs_dat[,"PROCEDURE_DESC"])
## order table
ord_tab <- my_tab[order(my_tab, decreasing = TRUE)]
write.table(ord_tab, file = "NLP_EDA_ordered_table.csv", sep = ",", quote = FALSE, row.names = TRUE )
write.table(ord_tab, file = "NLP_EDA_ordered_table.csv", sep = ",", quote = FALSE, row.names = FALSE )
ord_tab
library(xlsx)
install.packages("xlsx")
library(xlsx)
writexl(ord_tab, "c:/NLP_EDA_ordered_table.xlsx")
devtools::install_github("ropensci/writexl")
library(writexl)
writexl(ord_tab, "c:/NLP_EDA_ordered_table.xlsx")
library(writexl)
library(writexl)
writexl(ord_tab, "c:/NLP_EDA_ordered_table.xlsx")
write_xlsx(ord_tab, "c:/NLP_EDA_ordered_table.xlsx")
as.data.frame.matrix(my_tab[order(my_tab, decreasing = TRUE)])
my_tab[order(my_tab, decreasing = TRUE)]
as.data.frame(my_tab[order(my_tab, decreasing = TRUE)])
## order table & convert to DF
ord_tab_df <- as.data.frame(my_tab[order(my_tab, decreasing = TRUE)])
write_xlsx(ord_tab_df, "c:/NLP_EDA_ordered_table.xlsx")
write_xlsx(ord_tab_df, "/NLP_EDA_ordered_table.xlsx")
getwd()
write_xlsx(ord_tab_df, "/Users/janeshe/Desktop/RL_IBS/NLP_EDA_ordered_table.xlsx")
### unique claims & counts per date
unique_claim_counts <- ibs_dat %>% arrange(ymd(ibs_dat$from_dt)) %>%
group_by(from_dt, claimno) %>%
tally
unique_claim_counts
## Create plot with unique "from_dt" as x-axis, number of TOTAL claims as y-axis
########## This graph isn't that helpful and needs to be broken down
ggplot(data = unique_claim_counts, aes(x = from_dt, y = n)) +
geom_bar(stat = "identity", fill = "purple") +
labs(title ="Total Number of Claims (non-unique) per visit date",
x = "Date", y = "Number of (non-unique) Claims")
unique_claim_counts
## We can also group these by month from year to year
unique_visits_month <- ibs_dat %>% distinct(from_dt, .keep_all = TRUE) %>% mutate(month = format(from_dt, "%m"),
year = format(from_dt, "%Y")) %>% group_by(year, month) %>% tally
ggplot(data = unique_visits_month, aes(x = month, y = n, group = 1)) +
facet_wrap(~year) + geom_point() + geom_line(linetype=2) +
labs(title ="Unique Visits Each Month by Year",
x = "Year", y = "Number of Visits")
ibs_dat[!is.na(ibs_dat[,"conf_num"]),] %>% distinct(from_dt, .keep_all = TRUE) %>% mutate(month = format(from_dt, "%m"),
year = format(from_dt, "%Y")) %>% group_by(year, month, conf_num) %>% tally
source('~/.active-rstudio-document', echo=TRUE)
